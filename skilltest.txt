Q: Which problem does configuring core.excludesfile solve?
A: It lists all objects that are not meant to be tracked by Git with a reference file



Q: After resolving a merge conflict, you want the merge commit to include a default message that Git generates. How would you finalize the merge?
A: Use <git commit> and, when Git opens a text editor, accept the default message.



Q: What command can move your working directory to an earlier commit?
A: git checkout <commit_hash_here>



Q: When performing a revert on a single commit you encounter the following error:
Error: your local changes would be overwritten by revert. 
Which command would allow you to proceed with the revert process after committing your local changes? 

A: git revert --continue



Q: Which command creates an annotated tag named <mytag> on the current commit?
A: git tag -a mytag



Q: You are working on an application used by your company for internal communications and knowledge management. Your application's current version is v1.3, and your team then pushes their latest changes into the master branch for the new release. How can you label the new release of the project according to the version sequence used in the project and following Git's best practices?
A: git tag -a v1.4



Q: What happens when you tag the current branch and then rename it?
A: The tag remains active because it points to a particular commit, not the branch itself.



Q: You create a tag mytag and link it to your current branch. You then check out the tag using <git checkout mytag>. What does HEAD point to as a result?
A: The same commit as <mytag>



Q: You want to remove a specific file from your repository history so you run the following command:
git filter-branch --tree-filter
After a while, the command is running very slowly, Which filter could you use instead for quicker results?

A: --index-filter



Q: You want to remove some untracked files from your working directory and to discard your latest changes. You run the <git reset --hard HEAD> command. The latest changes to the tracked files are missing, but the untracked files still remain. Which command would you use to fix this?
A: git clean --force



Q: How does <git cherry-pick> add a commit named C to the current branch?
A: It creates a new commit containing a copy of C with the HEAD of the current branch as a parent.



Q: While in detached HEAD, you commit a new file. How would you keep that file in your history and prevent Git from garbage-collecting it?
A: Create a branch or a tag on the current commit.



Q: You are working on the main branch in your repository that contains a file called app.js. You create a branch called experiments where you run experimental changes to app.js. After a while, you want to bring the changes made to app.js into your main branch, so you run the following command:
git switch main
git restore --source experiments -- app.js
What would be the outcome?

A: This will check out the latest changes of that file on the <experiments> branch onto your <main> branch.



Q: The command <git status> lists the same file twice, once as "Modified" and once as "Deleted." Which scenario caused this result?
A: The file was modified, added to the index, and then deleted.



Q: How do you create the first commit in a project?
A: Stage the relevant files and directories and then use <git commit>.



Q: You create a new branch using the <git branch mybranch> command, but you do not check it out. What occurs when you next commit?
A: Git creates a new commit, but mybranch stays on the previous commit.



Q: What occurs when you execute the command <git blame README.md>?
A: You will see each line in the file and information about the last change made to that line.



Q: You tag the current commit and you then change the current branch, which forces it to point at the previous commit. What is the outcome?
A: The tagged commit is not garbage collected because there is a tag pointing at it.



Q: You are working on a project with developers all around the country, using git as your version control system. After working in the repository for a while you notice that some commits have become detached from the project history and are unnecessarily kept in memory, as they are not relevant anymore. How can you clean these commits from memory?
A: By running <git gc> to trigger Git's garbage collection.



Q: After writing the command <git checkout {branch-name}> numerous times, you want to abbreviate the name of the command. You run the command <git config --global alias.co checkout> and expect an alias to be set. What happens if you then type <git co {branch-name}>?
A: The checkout command happens as expected; the alias was set successfully.



Q: How do you benefit from using <git add -i> instead of <git add .>?
A: You can select specific files and easily update, patch, or revert them.



Q: You are not currently on any branch and you create a commit. What is the outcome?
A: The HEAD pointer moves to the new commit.



Q: You are working on the main branch. HEAD in main and HEAD in the branch <branch1> point to the same commit. What would be the consequences to the placement of the HEAD pointer if you rename <branch1> to <branch2>?
A: HEAD would still be the same in main and in branch2.



Q: What is the difference between <git branch -d your_branch> and <git branch -D your_branch>?
A: The -d flag deletes the local branch only if it has been merged with the remote branch, while the -D flag forces the deletion of the local branch without checking its remote state.


Q: What is the difference between <git branch -m> and <git branch -M>?
A: <git branch -m> will rename a branch and the corresponding reflog, whereas <git branch -M> will force the renaming of the branch, even if a branch with the new name already exists.













